// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_berlin_lib_Assert
#define INCLUDED_berlin_lib_Assert

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_a3983e8d1ce358d6_128_new)
HX_DECLARE_CLASS2(berlin,lib,Assert)

namespace berlin{
namespace lib{


class HXCPP_CLASS_ATTRIBUTES Assert_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Assert_obj OBJ_;
		Assert_obj();

	public:
		enum { _hx_ClassId = 0x7f541369 };

		void __construct(bool val);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="berlin.lib.Assert")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"berlin.lib.Assert"); }

		hx::ObjectPtr< Assert_obj > __new(bool val) {
			hx::ObjectPtr< Assert_obj > __this = new Assert_obj();
			__this->__construct(val);
			return __this;
		}

		static hx::ObjectPtr< Assert_obj > __alloc(hx::Ctx *_hx_ctx,bool val) {
			Assert_obj *__this = (Assert_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Assert_obj), false, "berlin.lib.Assert"));
			*(void **)__this = Assert_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_a3983e8d1ce358d6_128_new)
HXDLIN( 128)		::berlin::lib::Assert_obj::ok(val);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Assert_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Assert","\xe6","\xba","\x97","\x80"); }

		static void ok(bool val);
		static ::Dynamic ok_dyn();

};

} // end namespace berlin
} // end namespace lib

#endif /* INCLUDED_berlin_lib_Assert */ 
