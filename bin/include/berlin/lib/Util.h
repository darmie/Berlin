// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_berlin_lib_Util
#define INCLUDED_berlin_lib_Util

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_fc1f1680195ae410_14_new)
HX_DECLARE_CLASS2(berlin,lib,RawError)
HX_DECLARE_CLASS2(berlin,lib,Util)

namespace berlin{
namespace lib{


class HXCPP_CLASS_ATTRIBUTES Util_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Util_obj OBJ_;
		Util_obj();

	public:
		enum { _hx_ClassId = 0x2c3cee21 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="berlin.lib.Util")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"berlin.lib.Util"); }

		hx::ObjectPtr< Util_obj > __new() {
			hx::ObjectPtr< Util_obj > __this = new Util_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Util_obj > __alloc(hx::Ctx *_hx_ctx) {
			Util_obj *__this = (Util_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Util_obj), false, "berlin.lib.Util"));
			*(void **)__this = Util_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_fc1f1680195ae410_14_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Util_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Util","\x22","\x84","\x87","\x38"); }

		static  ::Dynamic arrayPrepend( ::Dynamic item, ::Dynamic a);
		static ::Dynamic arrayPrepend_dyn();

		static ::cpp::VirtualArray uniq(::cpp::VirtualArray x);
		static ::Dynamic uniq_dyn();

		static ::Array< int > getLineCol(int pos,::String input);
		static ::Dynamic getLineCol_dyn();

		static  ::Dynamic first(::cpp::VirtualArray a);
		static ::Dynamic first_dyn();

		static  ::Dynamic rest(::cpp::VirtualArray a);
		static ::Dynamic rest_dyn();

		static  ::berlin::lib::RawError updateError( ::berlin::lib::RawError err,int pos, ::Dynamic e);
		static ::Dynamic updateError_dyn();

};

} // end namespace berlin
} // end namespace lib

#endif /* INCLUDED_berlin_lib_Util */ 
