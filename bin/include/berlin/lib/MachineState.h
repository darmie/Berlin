// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_berlin_lib_MachineState
#define INCLUDED_berlin_lib_MachineState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(berlin,lib,MachineConfiguration)
HX_DECLARE_CLASS2(berlin,lib,MachineState)

namespace berlin{
namespace lib{


class HXCPP_CLASS_ATTRIBUTES MachineState_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MachineState_obj OBJ_;
		MachineState_obj();

	public:
		enum { _hx_ClassId = 0x584e030d };

		void __construct(::String type, ::Dynamic result, ::berlin::lib::MachineConfiguration configuration);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="berlin.lib.MachineState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"berlin.lib.MachineState"); }
		static hx::ObjectPtr< MachineState_obj > __new(::String type, ::Dynamic result, ::berlin::lib::MachineConfiguration configuration);
		static hx::ObjectPtr< MachineState_obj > __alloc(hx::Ctx *_hx_ctx,::String type, ::Dynamic result, ::berlin::lib::MachineConfiguration configuration);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MachineState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MachineState","\x2a","\xcd","\xe7","\x76"); }

		static  ::berlin::lib::MachineState FINAL( ::Dynamic result);
		static ::Dynamic FINAL_dyn();

		static  ::berlin::lib::MachineState INTER( ::berlin::lib::MachineConfiguration configuration);
		static ::Dynamic INTER_dyn();

		::String type;
		 ::Dynamic result;
		 ::berlin::lib::MachineConfiguration configuration;
};

} // end namespace berlin
} // end namespace lib

#endif /* INCLUDED_berlin_lib_MachineState */ 
