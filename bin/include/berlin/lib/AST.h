// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_berlin_lib_AST
#define INCLUDED_berlin_lib_AST

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_9a0e0835a3d6f0c7_24_new)
HX_DECLARE_CLASS2(berlin,lib,AST)

namespace berlin{
namespace lib{


class HXCPP_CLASS_ATTRIBUTES AST_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AST_obj OBJ_;
		AST_obj();

	public:
		enum { _hx_ClassId = 0x1191be67 };

		void __construct(::String form, ::Dynamic type, ::Dynamic children);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="berlin.lib.AST")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"berlin.lib.AST"); }

		hx::ObjectPtr< AST_obj > __new(::String form, ::Dynamic type, ::Dynamic children) {
			hx::ObjectPtr< AST_obj > __this = new AST_obj();
			__this->__construct(form,type,children);
			return __this;
		}

		static hx::ObjectPtr< AST_obj > __alloc(hx::Ctx *_hx_ctx,::String form, ::Dynamic type, ::Dynamic children) {
			AST_obj *__this = (AST_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AST_obj), true, "berlin.lib.AST"));
			*(void **)__this = AST_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_9a0e0835a3d6f0c7_24_new)
HXLINE(  25)		( ( ::berlin::lib::AST)(__this) )->form = form;
HXLINE(  26)		( ( ::berlin::lib::AST)(__this) )->type = type;
HXLINE(  27)		( ( ::berlin::lib::AST)(__this) )->children = ( (::cpp::VirtualArray)(children) );
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AST_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AST","\x22","\x9b","\x31","\x00"); }

		static  ::berlin::lib::AST EMPTY();
		static ::Dynamic EMPTY_dyn();

		static  ::berlin::lib::AST TREE( ::Dynamic str, ::Dynamic asts);
		static ::Dynamic TREE_dyn();

		::String form;
		 ::Dynamic type;
		::cpp::VirtualArray children;
};

} // end namespace berlin
} // end namespace lib

#endif /* INCLUDED_berlin_lib_AST */ 
