// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_berlin_lib_Exp
#define INCLUDED_berlin_lib_Exp

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_466b717f237fcf68_31_new)
HX_DECLARE_CLASS2(berlin,lib,Exp)

namespace berlin{
namespace lib{


class HXCPP_CLASS_ATTRIBUTES Exp_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Exp_obj OBJ_;
		Exp_obj();

	public:
		enum { _hx_ClassId = 0x1194e7c2 };

		void __construct(::String type,::cpp::VirtualArray args);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="berlin.lib.Exp")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"berlin.lib.Exp"); }

		hx::ObjectPtr< Exp_obj > __new(::String type,::cpp::VirtualArray args) {
			hx::ObjectPtr< Exp_obj > __this = new Exp_obj();
			__this->__construct(type,args);
			return __this;
		}

		static hx::ObjectPtr< Exp_obj > __alloc(hx::Ctx *_hx_ctx,::String type,::cpp::VirtualArray args) {
			Exp_obj *__this = (Exp_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Exp_obj), true, "berlin.lib.Exp"));
			*(void **)__this = Exp_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_466b717f237fcf68_31_new)
HXLINE(  32)		( ( ::berlin::lib::Exp)(__this) )->args = args;
HXLINE(  33)		( ( ::berlin::lib::Exp)(__this) )->type = type;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Exp_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Exp","\x7d","\xc4","\x34","\x00"); }

		static  ::berlin::lib::Exp ANY(::cpp::VirtualArray args);
		static ::Dynamic ANY_dyn();

		static  ::berlin::lib::Exp NT(::cpp::VirtualArray args);
		static ::Dynamic NT_dyn();

		static  ::berlin::lib::Exp VOID(::cpp::VirtualArray args);
		static ::Dynamic VOID_dyn();

		static  ::berlin::lib::Exp CHAR(::cpp::VirtualArray args);
		static ::Dynamic CHAR_dyn();

		static  ::berlin::lib::Exp CHAR_CLASS(::cpp::VirtualArray args);
		static ::Dynamic CHAR_CLASS_dyn();

		static  ::berlin::lib::Exp AND(::cpp::VirtualArray args);
		static ::Dynamic AND_dyn();

		static  ::berlin::lib::Exp NOT(::cpp::VirtualArray args);
		static ::Dynamic NOT_dyn();

		static  ::berlin::lib::Exp OPT(::cpp::VirtualArray args);
		static ::Dynamic OPT_dyn();

		static  ::berlin::lib::Exp ALT(::cpp::VirtualArray args);
		static ::Dynamic ALT_dyn();

		static  ::berlin::lib::Exp SEQ(::cpp::VirtualArray args);
		static ::Dynamic SEQ_dyn();

		static  ::berlin::lib::Exp STAR(::cpp::VirtualArray args);
		static ::Dynamic STAR_dyn();

		static  ::berlin::lib::Exp PLUS(::cpp::VirtualArray args);
		static ::Dynamic PLUS_dyn();

		::String type;
		::cpp::VirtualArray args;
};

} // end namespace berlin
} // end namespace lib

#endif /* INCLUDED_berlin_lib_Exp */ 
