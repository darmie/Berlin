// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_berlin_lib_ParseError
#include <berlin/lib/ParseError.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6d16727383b17b91_18_new,"berlin.lib.ParseError","new",0x5de544bc,"berlin.lib.ParseError.new","berlin/lib/ParseError.hx",18,0x91c1e872)
HX_LOCAL_STACK_FRAME(_hx_pos_6d16727383b17b91_50_toString,"berlin.lib.ParseError","toString",0x3bee0ed0,"berlin.lib.ParseError.toString","berlin/lib/ParseError.hx",50,0x91c1e872)
HX_LOCAL_STACK_FRAME(_hx_pos_6d16727383b17b91_27_toString,"berlin.lib.ParseError","toString",0x3bee0ed0,"berlin.lib.ParseError.toString","berlin/lib/ParseError.hx",27,0x91c1e872)
HX_LOCAL_STACK_FRAME(_hx_pos_6d16727383b17b91_37_toString,"berlin.lib.ParseError","toString",0x3bee0ed0,"berlin.lib.ParseError.toString","berlin/lib/ParseError.hx",37,0x91c1e872)
namespace berlin{
namespace lib{

void ParseError_obj::__construct(int pos,int line,int col,::cpp::VirtualArray nt, ::Dynamic chars){
            	HX_STACKFRAME(&_hx_pos_6d16727383b17b91_18_new)
HXLINE(  19)		this->pos = pos;
HXLINE(  20)		this->line = line;
HXLINE(  21)		this->col = col;
HXLINE(  22)		this->nt = nt;
HXLINE(  23)		this->chars = chars;
            	}

Dynamic ParseError_obj::__CreateEmpty() { return new ParseError_obj; }

void *ParseError_obj::_hx_vtable = 0;

Dynamic ParseError_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ParseError_obj > _hx_result = new ParseError_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool ParseError_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2efffdd8;
}

::String ParseError_obj::toString(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		::cpp::VirtualArray _hx_run( ::Dynamic s){
            			HX_STACKFRAME(&_hx_pos_6d16727383b17b91_50_toString)
HXLINE(  50)			return hx::TCast< ::cpp::VirtualArray >::cast(s)->slice((int)1,(int)-1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_6d16727383b17b91_27_toString)
HXLINE(  29)		if (hx::IsNotNull(  ::Dynamic(this->chars->__Field(HX_("charClasses",70,3e,16,91),hx::paccDynamic)) )) {
HXLINE(  31)			this->chars =  ::Dynamic(this->chars->__Field(HX_("charClasses",70,3e,16,91),hx::paccDynamic));
            		}
HXLINE(  34)		if (hx::IsNotNull( this->chars )) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			::String _hx_run( ::Dynamic ch){
            				HX_STACKFRAME(&_hx_pos_6d16727383b17b91_37_toString)
HXLINE(  38)				::String str = HX_("",00,00,00,00);
HXLINE(  39)				if (hx::IsNotNull(  ::Dynamic(ch->__Field(HX_("char",d6,5e,bf,41),hx::paccDynamic)) )) {
HXLINE(  40)					str = ( (::String)(ch->__Field(HX_("char",d6,5e,bf,41),hx::paccDynamic)) );
            				}
            				else {
HXLINE(  41)					if (hx::IsNotNull(  ::Dynamic(ch->__Field(HX_("charClasses",70,3e,16,91),hx::paccDynamic)) )) {
HXLINE(  42)						str = ( (::String)(ch->__Field(HX_("charClasses",70,3e,16,91),hx::paccDynamic)) );
            					}
            				}
HXLINE(  44)				return ::haxe::format::JsonPrinter_obj::print(str,null(),null());
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  36)			this->chars->__Field(HX_("map",9c,0a,53,00),hx::paccDynamic)( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE(  48)		::String _hx_tmp = ((HX_("Parse Error: failed to match '",09,de,9d,5a) + this->nt->join(HX_(",",2c,00,00,00))) + HX_("' at line=",f5,d9,c9,6d));
HXDLIN(  48)		::String _hx_tmp1 = ((((((_hx_tmp + this->line) + HX_(", col=",71,28,4b,46)) + this->col) + HX_(", pos=",9d,f4,e2,4e)) + this->pos) + HX_(" (expected '",87,4e,21,2a));
HXDLIN(  48)		return ((_hx_tmp1 + hx::TCast< ::cpp::VirtualArray >::cast(this->chars)->map( ::Dynamic(new _hx_Closure_1()))->join(HX_(",",2c,00,00,00))) + HX_("')",22,22,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ParseError_obj,toString,return )


hx::ObjectPtr< ParseError_obj > ParseError_obj::__new(int pos,int line,int col,::cpp::VirtualArray nt, ::Dynamic chars) {
	hx::ObjectPtr< ParseError_obj > __this = new ParseError_obj();
	__this->__construct(pos,line,col,nt,chars);
	return __this;
}

hx::ObjectPtr< ParseError_obj > ParseError_obj::__alloc(hx::Ctx *_hx_ctx,int pos,int line,int col,::cpp::VirtualArray nt, ::Dynamic chars) {
	ParseError_obj *__this = (ParseError_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ParseError_obj), true, "berlin.lib.ParseError"));
	*(void **)__this = ParseError_obj::_hx_vtable;
	__this->__construct(pos,line,col,nt,chars);
	return __this;
}

ParseError_obj::ParseError_obj()
{
}

void ParseError_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ParseError);
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(col,"col");
	HX_MARK_MEMBER_NAME(nt,"nt");
	HX_MARK_MEMBER_NAME(chars,"chars");
	HX_MARK_END_CLASS();
}

void ParseError_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(col,"col");
	HX_VISIT_MEMBER_NAME(nt,"nt");
	HX_VISIT_MEMBER_NAME(chars,"chars");
}

hx::Val ParseError_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nt") ) { return hx::Val( nt ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		if (HX_FIELD_EQ(inName,"col") ) { return hx::Val( col ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return hx::Val( line ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { return hx::Val( chars ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ParseError_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nt") ) { nt=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"col") ) { col=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { chars=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ParseError_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"));
	outFields->push(HX_HCSTRING("col","\x40","\x80","\x4b","\x00"));
	outFields->push(HX_HCSTRING("nt","\x46","\x60","\x00","\x00"));
	outFields->push(HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ParseError_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ParseError_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsInt,(int)offsetof(ParseError_obj,line),HX_HCSTRING("line","\xf4","\x17","\xb3","\x47")},
	{hx::fsInt,(int)offsetof(ParseError_obj,col),HX_HCSTRING("col","\x40","\x80","\x4b","\x00")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(ParseError_obj,nt),HX_HCSTRING("nt","\x46","\x60","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ParseError_obj,chars),HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ParseError_obj_sStaticStorageInfo = 0;
#endif

static ::String ParseError_obj_sMemberFields[] = {
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"),
	HX_HCSTRING("col","\x40","\x80","\x4b","\x00"),
	HX_HCSTRING("nt","\x46","\x60","\x00","\x00"),
	HX_HCSTRING("chars","\xdd","\x9c","\xb3","\x45"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ParseError_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ParseError_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ParseError_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ParseError_obj::__mClass,"__mClass");
};

#endif

hx::Class ParseError_obj::__mClass;

void ParseError_obj::__register()
{
	hx::Object *dummy = new ParseError_obj;
	ParseError_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("berlin.lib.ParseError","\xca","\x76","\x45","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ParseError_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ParseError_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ParseError_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ParseError_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ParseError_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ParseError_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace berlin
} // end namespace lib
