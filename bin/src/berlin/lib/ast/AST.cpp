// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_berlin_lib_ast_AST
#include <berlin/lib/ast/AST.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cb55caac346ddb23_14_new,"berlin.lib.ast.AST","new",0x97cfba33,"berlin.lib.ast.AST.new","berlin/lib/ast/AST.hx",14,0xce774e60)
HX_LOCAL_STACK_FRAME(_hx_pos_cb55caac346ddb23_18_echo,"berlin.lib.ast.AST","echo",0x37feb5b2,"berlin.lib.ast.AST.echo","berlin/lib/ast/AST.hx",18,0xce774e60)
namespace berlin{
namespace lib{
namespace ast{

void AST_obj::__construct(::String val){
            	HX_STACKFRAME(&_hx_pos_cb55caac346ddb23_14_new)
HXDLIN(  14)		this->value = val;
            	}

Dynamic AST_obj::__CreateEmpty() { return new AST_obj; }

void *AST_obj::_hx_vtable = 0;

Dynamic AST_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AST_obj > _hx_result = new AST_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AST_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4e4df47b;
}

void AST_obj::echo(){
            	HX_STACKFRAME(&_hx_pos_cb55caac346ddb23_18_echo)
HXDLIN(  18)		::Sys_obj::print((this->value + HX_("\n",0a,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AST_obj,echo,(void))


hx::ObjectPtr< AST_obj > AST_obj::__new(::String val) {
	hx::ObjectPtr< AST_obj > __this = new AST_obj();
	__this->__construct(val);
	return __this;
}

hx::ObjectPtr< AST_obj > AST_obj::__alloc(hx::Ctx *_hx_ctx,::String val) {
	AST_obj *__this = (AST_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AST_obj), true, "berlin.lib.ast.AST"));
	*(void **)__this = AST_obj::_hx_vtable;
	__this->__construct(val);
	return __this;
}

AST_obj::AST_obj()
{
}

void AST_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AST);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_END_CLASS();
}

void AST_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
}

hx::Val AST_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"echo") ) { return hx::Val( echo_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AST_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AST_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AST_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(AST_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AST_obj_sStaticStorageInfo = 0;
#endif

static ::String AST_obj_sMemberFields[] = {
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("echo","\xe5","\x06","\x0e","\x43"),
	::String(null()) };

static void AST_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AST_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AST_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AST_obj::__mClass,"__mClass");
};

#endif

hx::Class AST_obj::__mClass;

void AST_obj::__register()
{
	hx::Object *dummy = new AST_obj;
	AST_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("berlin.lib.ast.AST","\xc1","\x24","\xdc","\xcd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AST_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AST_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AST_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AST_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AST_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AST_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace berlin
} // end namespace lib
} // end namespace ast
