// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_berlin_lib_Exp
#include <berlin/lib/Exp.h>
#endif
#ifndef INCLUDED_berlin_lib_NonTerminal
#include <berlin/lib/NonTerminal.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0aaca89f89112b37_14_new,"berlin.lib.NonTerminal","new",0x778e70c6,"berlin.lib.NonTerminal.new","berlin/lib/NonTerminal.hx",14,0x19fefd6c)
HX_LOCAL_STACK_FRAME(_hx_pos_0aaca89f89112b37_22_nonterminal,"berlin.lib.NonTerminal","nonterminal",0x828cc5ef,"berlin.lib.NonTerminal.nonterminal","berlin/lib/NonTerminal.hx",22,0x19fefd6c)
namespace berlin{
namespace lib{

void NonTerminal_obj::__construct(::String mode, ::berlin::lib::Exp exp){
            	HX_STACKFRAME(&_hx_pos_0aaca89f89112b37_14_new)
HXLINE(  15)		this->mode = mode;
HXLINE(  16)		this->exp = exp;
            	}

Dynamic NonTerminal_obj::__CreateEmpty() { return new NonTerminal_obj; }

void *NonTerminal_obj::_hx_vtable = 0;

Dynamic NonTerminal_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NonTerminal_obj > _hx_result = new NonTerminal_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NonTerminal_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x518cfb06;
}

 ::berlin::lib::NonTerminal NonTerminal_obj::nonterminal(::String mode, ::berlin::lib::Exp exp){
            	HX_GC_STACKFRAME(&_hx_pos_0aaca89f89112b37_22_nonterminal)
HXDLIN(  22)		return  ::berlin::lib::NonTerminal_obj::__alloc( HX_CTX ,mode,exp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NonTerminal_obj,nonterminal,return )


hx::ObjectPtr< NonTerminal_obj > NonTerminal_obj::__new(::String mode, ::berlin::lib::Exp exp) {
	hx::ObjectPtr< NonTerminal_obj > __this = new NonTerminal_obj();
	__this->__construct(mode,exp);
	return __this;
}

hx::ObjectPtr< NonTerminal_obj > NonTerminal_obj::__alloc(hx::Ctx *_hx_ctx,::String mode, ::berlin::lib::Exp exp) {
	NonTerminal_obj *__this = (NonTerminal_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NonTerminal_obj), true, "berlin.lib.NonTerminal"));
	*(void **)__this = NonTerminal_obj::_hx_vtable;
	__this->__construct(mode,exp);
	return __this;
}

NonTerminal_obj::NonTerminal_obj()
{
}

void NonTerminal_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NonTerminal);
	HX_MARK_MEMBER_NAME(mode,"mode");
	HX_MARK_MEMBER_NAME(exp,"exp");
	HX_MARK_END_CLASS();
}

void NonTerminal_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mode,"mode");
	HX_VISIT_MEMBER_NAME(exp,"exp");
}

hx::Val NonTerminal_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"exp") ) { return hx::Val( exp ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { return hx::Val( mode ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NonTerminal_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"nonterminal") ) { outValue = nonterminal_dyn(); return true; }
	}
	return false;
}

hx::Val NonTerminal_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"exp") ) { exp=inValue.Cast<  ::berlin::lib::Exp >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { mode=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NonTerminal_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"));
	outFields->push(HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NonTerminal_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(NonTerminal_obj,mode),HX_HCSTRING("mode","\x63","\xd3","\x60","\x48")},
	{hx::fsObject /*::berlin::lib::Exp*/ ,(int)offsetof(NonTerminal_obj,exp),HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NonTerminal_obj_sStaticStorageInfo = 0;
#endif

static ::String NonTerminal_obj_sMemberFields[] = {
	HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"),
	HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00"),
	::String(null()) };

static void NonTerminal_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NonTerminal_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NonTerminal_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NonTerminal_obj::__mClass,"__mClass");
};

#endif

hx::Class NonTerminal_obj::__mClass;

static ::String NonTerminal_obj_sStaticFields[] = {
	HX_HCSTRING("nonterminal","\x89","\x4f","\x82","\x53"),
	::String(null())
};

void NonTerminal_obj::__register()
{
	hx::Object *dummy = new NonTerminal_obj;
	NonTerminal_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("berlin.lib.NonTerminal","\xd4","\x55","\x11","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NonTerminal_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NonTerminal_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NonTerminal_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NonTerminal_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NonTerminal_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NonTerminal_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NonTerminal_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NonTerminal_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace berlin
} // end namespace lib
