// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_berlin_lib_AST
#include <berlin/lib/AST.h>
#endif
#ifndef INCLUDED_berlin_lib_Assert
#include <berlin/lib/Assert.h>
#endif
#ifndef INCLUDED_berlin_lib_Continuations
#include <berlin/lib/Continuations.h>
#endif
#ifndef INCLUDED_berlin_lib_ErrAny
#include <berlin/lib/ErrAny.h>
#endif
#ifndef INCLUDED_berlin_lib_ErrCC
#include <berlin/lib/ErrCC.h>
#endif
#ifndef INCLUDED_berlin_lib_ErrChar
#include <berlin/lib/ErrChar.h>
#endif
#ifndef INCLUDED_berlin_lib_Exp
#include <berlin/lib/Exp.h>
#endif
#ifndef INCLUDED_berlin_lib_MachineConfiguration
#include <berlin/lib/MachineConfiguration.h>
#endif
#ifndef INCLUDED_berlin_lib_MachineState
#include <berlin/lib/MachineState.h>
#endif
#ifndef INCLUDED_berlin_lib_NonTerminal
#include <berlin/lib/NonTerminal.h>
#endif
#ifndef INCLUDED_berlin_lib_ParseError
#include <berlin/lib/ParseError.h>
#endif
#ifndef INCLUDED_berlin_lib_Parser
#include <berlin/lib/Parser.h>
#endif
#ifndef INCLUDED_berlin_lib_RawError
#include <berlin/lib/RawError.h>
#endif
#ifndef INCLUDED_berlin_lib_Util
#include <berlin/lib/Util.h>
#endif
#ifndef INCLUDED_berlin_lib_Value
#include <berlin/lib/Value.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7dbd3ce9fe073727_16_new,"berlin.lib.Parser","new",0xdd57fd86,"berlin.lib.Parser.new","berlin/lib/Parser.hx",16,0xa6665fe8)
HX_LOCAL_STACK_FRAME(_hx_pos_7dbd3ce9fe073727_32_match,"berlin.lib.Parser","match",0x4b698beb,"berlin.lib.Parser.match","berlin/lib/Parser.hx",32,0xa6665fe8)
HX_LOCAL_STACK_FRAME(_hx_pos_7dbd3ce9fe073727_36_match,"berlin.lib.Parser","match",0x4b698beb,"berlin.lib.Parser.match","berlin/lib/Parser.hx",36,0xa6665fe8)
static const ::String _hx_array_data_59658294_7[] = {
	HX_("CONT_ALT",fc,3c,cf,99),
};
static const ::String _hx_array_data_59658294_8[] = {
	HX_("CONT_SEQ",72,df,dc,99),HX_("CONT_VOID",01,d8,69,09),HX_("CONT_PLUS",07,54,70,05),
};
static const ::String _hx_array_data_59658294_9[] = {
	HX_("CONT_AND",aa,3e,cf,99),
};
static const ::String _hx_array_data_59658294_10[] = {
	HX_("CONT_NOT",e6,1c,d9,99),
};
static const ::String _hx_array_data_59658294_11[] = {
	HX_("CONT_STAR",7f,f8,71,07),HX_("CONT_OPT",06,e0,d9,99),
};
static const ::String _hx_array_data_59658294_12[] = {
	HX_("CONT_NT",b3,1b,5f,99),
};
HX_LOCAL_STACK_FRAME(_hx_pos_7dbd3ce9fe073727_129_match,"berlin.lib.Parser","match",0x4b698beb,"berlin.lib.Parser.match","berlin/lib/Parser.hx",129,0xa6665fe8)
HX_LOCAL_STACK_FRAME(_hx_pos_7dbd3ce9fe073727_132_match,"berlin.lib.Parser","match",0x4b698beb,"berlin.lib.Parser.match","berlin/lib/Parser.hx",132,0xa6665fe8)
HX_LOCAL_STACK_FRAME(_hx_pos_7dbd3ce9fe073727_28_match,"berlin.lib.Parser","match",0x4b698beb,"berlin.lib.Parser.match","berlin/lib/Parser.hx",28,0xa6665fe8)
HX_LOCAL_STACK_FRAME(_hx_pos_7dbd3ce9fe073727_325_parse,"berlin.lib.Parser","parse",0x059bd2d9,"berlin.lib.Parser.parse","berlin/lib/Parser.hx",325,0xa6665fe8)
namespace berlin{
namespace lib{

void Parser_obj::__construct( ::Dynamic env,::String __o_start){
::String start = __o_start.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_7dbd3ce9fe073727_16_new)
HXLINE(  18)		if ((::Reflect_obj::fields(this->env)->length == (int)0)) {
HXLINE(  19)			::Reflect_obj::setField(this->env,HX_(" ",20,00,00,00),HX_("",00,00,00,00));
            		}
HXLINE(  24)		this->start = start;
            	}

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

void *Parser_obj::_hx_vtable = 0;

Dynamic Parser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Parser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e2feaa2;
}

 ::Dynamic Parser_obj::match(::String nt,::String input){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,int,inputLen) HXARGC(1)
            		bool _hx_run(int pos){
            			HX_STACKFRAME(&_hx_pos_7dbd3ce9fe073727_32_match)
HXLINE(  32)			return (pos >= inputLen);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_3, ::berlin::lib::Parser,_gthis, ::Dynamic,eof,::String,input) HXARGC(1)
            		 ::berlin::lib::MachineState _hx_run( ::berlin::lib::MachineConfiguration conf){
            			HX_GC_STACKFRAME(&_hx_pos_7dbd3ce9fe073727_36_match)
HXLINE(  37)			::Array< ::Dynamic> asts = conf->asts;
HXLINE(  38)			int pos1 = conf->pos;
HXLINE(  39)			 ::berlin::lib::Exp exp = conf->exp;
HXLINE(  40)			 ::Dynamic err = conf->err;
HXLINE(  42)			::Array< ::Dynamic> k = conf->continuations;
HXLINE(  44)			 ::berlin::lib::Continuations kFirst =  ::berlin::lib::Continuations_obj::__alloc( HX_CTX ,null(),(int)0,null(),null(),null(),null(),null(),null(),null());
HXLINE(  45)			::cpp::VirtualArray kRest = ::Array_obj< ::Dynamic>::__new();
HXLINE(  46)			 ::berlin::lib::Exp firstExp =  ::berlin::lib::Exp_obj::__alloc( HX_CTX ,null(),::cpp::VirtualArray_obj::__new(0));
HXLINE(  47)			::Array< ::Dynamic> restExp = ::Array_obj< ::Dynamic>::__new();
HXLINE(  48)			::Array< ::Dynamic> es = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  50)			if (hx::IsNotNull( k )) {
HXLINE(  52)				kFirst = hx::TCast<  ::berlin::lib::Continuations >::cast(::berlin::lib::Util_obj::first(k));
HXLINE(  53)				kRest = ( (::cpp::VirtualArray)(::berlin::lib::Util_obj::rest(k)) );
HXLINE(  55)				if (hx::IsNotNull( kFirst )) {
HXLINE(  57)					es = kFirst->expressions;
HXLINE(  59)					if (hx::IsNotNull( es )) {
HXLINE(  61)						firstExp = ( ( ::berlin::lib::Exp)(::berlin::lib::Util_obj::first(es)) );
HXLINE(  62)						restExp = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::rest(es)) );
            					}
            				}
            			}
HXLINE(  68)			::Array< ::Dynamic> _state = ::Array_obj< ::Dynamic>::__new(1)->init(0,::berlin::lib::MachineState_obj::INTER(null()));
HXLINE(  70)			{
HXLINE(  70)				::String _g = conf->type;
HXDLIN(  70)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("APPLY",4e,bd,29,a2)) ){
HXLINE( 193)					bool move1;
HXDLIN( 193)					if ((conf->value->type == HX_("FAIL",de,81,76,2e))) {
HXLINE( 193)						move1 = (::Array_obj< ::String >::fromData( _hx_array_data_59658294_7,1)->indexOf(kFirst->type,null()) == (int)-1);
            					}
            					else {
HXLINE( 193)						move1 = false;
            					}
HXDLIN( 193)					if (move1) {
HXLINE( 194)						if ((::Array_obj< ::String >::fromData( _hx_array_data_59658294_8,3)->indexOf(kFirst->type,null()) != (int)-1)) {
HXLINE( 195)							 ::berlin::lib::MachineState move2 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,conf->value));
HXDLIN( 195)							_state[(int)0] = move2;
            						}
            						else {
HXLINE( 196)							if ((::Array_obj< ::String >::fromData( _hx_array_data_59658294_9,1)->indexOf(kFirst->type,null()) != (int)-1)) {
HXLINE( 197)								 ::berlin::lib::MachineState move3 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::FAIL(kFirst->err)));
HXDLIN( 197)								_state[(int)0] = move3;
            							}
            							else {
HXLINE( 198)								if ((::Array_obj< ::String >::fromData( _hx_array_data_59658294_10,1)->indexOf(kFirst->type,null()) != (int)-1)) {
HXLINE( 199)									int kFirst1 = kFirst->pos;
HXDLIN( 199)									::Array< ::Dynamic> kFirst2 = kFirst->asts;
HXDLIN( 199)									 ::berlin::lib::MachineState move4 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::VAL(kFirst1,kFirst2,conf->value->err)));
HXDLIN( 199)									_state[(int)0] = move4;
            								}
            								else {
HXLINE( 200)									if ((::Array_obj< ::String >::fromData( _hx_array_data_59658294_11,2)->indexOf(kFirst->type,null()) != (int)-1)) {
HXLINE( 201)										int kFirst3 = kFirst->pos;
HXDLIN( 201)										::Array< ::Dynamic> kFirst4 = kFirst->asts;
HXDLIN( 201)										 ::berlin::lib::MachineState move5 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::VAL(kFirst3,kFirst4,conf->value->err)));
HXDLIN( 201)										_state[(int)0] = move5;
            									}
            									else {
HXLINE( 202)										if ((::Array_obj< ::String >::fromData( _hx_array_data_59658294_12,1)->indexOf(kFirst->type,null()) != (int)-1)) {
HXLINE( 203)											err = conf->value->err;
HXLINE( 204)											 ::berlin::lib::MachineState move6 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::FAIL( ::berlin::lib::RawError_obj::__alloc( HX_CTX , ::Dynamic(err->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)), ::Dynamic(err->__Field(HX_("nonterminals",ca,48,83,be),hx::paccDynamic)), ::Dynamic(err->__Field(HX_("failedChars",e0,59,ab,17),hx::paccDynamic)),kFirst->nt))));
HXDLIN( 204)											_state[(int)0] = move6;
            										}
            										else {
HXLINE( 206)											 ::berlin::lib::MachineState move7 = ::berlin::lib::MachineState_obj::FINAL(hx::TCast<  ::berlin::lib::RawError >::cast(conf->value->err)->toParseError(input));
HXDLIN( 206)											_state[(int)0] = move7;
            										}
            									}
            								}
            							}
            						}
            					}
            					else {
HXLINE( 208)						if ((kFirst->type == HX_("CONT_SEQ",72,df,dc,99))) {
HXLINE( 209)							if ((es->length > (int)0)) {
HXLINE( 210)								int conf1 = conf->value->pos;
HXDLIN( 210)								::Array< ::Dynamic> conf2 = conf->value->asts;
HXDLIN( 210)								 ::Dynamic move8 = conf->value->err;
HXDLIN( 210)								 ::berlin::lib::MachineState move9 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(firstExp,conf1,conf2,move8,( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(::berlin::lib::Continuations_obj::CONT_SEQ(restExp),kRest)) )));
HXDLIN( 210)								_state[(int)0] = move9;
            							}
            							else {
HXLINE( 212)								 ::berlin::lib::MachineState move10 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,conf->value));
HXDLIN( 212)								_state[(int)0] = move10;
            							}
            						}
            						else {
HXLINE( 219)							bool move11;
HXDLIN( 219)							if ((kFirst->type != HX_("CONT_STAR",7f,f8,71,07))) {
HXLINE( 219)								move11 = (kFirst->type == HX_("CONT_PLUS",07,54,70,05));
            							}
            							else {
HXLINE( 219)								move11 = true;
            							}
HXDLIN( 219)							if (move11) {
HXLINE( 220)								::berlin::lib::Assert_obj::ok(::Std_obj::is(conf->value,hx::ClassOf< ::berlin::lib::Value >()));
HXLINE( 221)								 ::berlin::lib::Exp kFirst5 = kFirst->expression;
HXDLIN( 221)								int conf3 = conf->value->pos;
HXDLIN( 221)								::Array< ::Dynamic> conf4 = conf->value->asts;
HXDLIN( 221)								 ::Dynamic move12 = conf->value->err;
HXDLIN( 221)								 ::berlin::lib::MachineState move13 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(kFirst5,conf3,conf4,move12,( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(::berlin::lib::Continuations_obj::CONT_STAR(kFirst->expression,conf->value->pos,conf->value->asts),kRest)) )));
HXDLIN( 221)								_state[(int)0] = move13;
            							}
            							else {
HXLINE( 223)								if ((kFirst->type == HX_("CONT_VOID",01,d8,69,09))) {
HXLINE( 224)									int conf5 = conf->value->pos;
HXDLIN( 224)									::Array< ::Dynamic> kFirst6 = kFirst->asts;
HXDLIN( 224)									 ::berlin::lib::MachineState move14 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::VAL(conf5,kFirst6,conf->value->err)));
HXDLIN( 224)									_state[(int)0] = move14;
            								}
            								else {
HXLINE( 226)									if ((kFirst->type == HX_("CONT_ALT",fc,3c,cf,99))) {
HXLINE( 228)										bool move15;
HXDLIN( 228)										if ((conf->value->type == HX_("FAIL",de,81,76,2e))) {
HXLINE( 228)											move15 = (es->length > (int)0);
            										}
            										else {
HXLINE( 228)											move15 = false;
            										}
HXDLIN( 228)										if (move15) {
HXLINE( 229)											 ::Dynamic move16 = ::berlin::lib::Util_obj::first(es);
HXDLIN( 229)											int kFirst7 = kFirst->pos;
HXDLIN( 229)											::Array< ::Dynamic> kFirst8 = kFirst->asts;
HXDLIN( 229)											 ::Dynamic move17 = conf->value->err;
HXDLIN( 229)											::Array< ::Dynamic> value = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::rest(es)) );
HXDLIN( 229)											 ::berlin::lib::MachineState move18 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(( ( ::berlin::lib::Exp)(move16) ),kFirst7,kFirst8,move17,( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(::berlin::lib::Continuations_obj::CONT_ALT(value,kFirst->pos,kFirst->asts),kRest)) )));
HXDLIN( 229)											_state[(int)0] = move18;
            										}
            										else {
HXLINE( 231)											 ::berlin::lib::MachineState move19 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,conf->value));
HXDLIN( 231)											_state[(int)0] = move19;
            										}
            									}
            									else {
HXLINE( 233)										if ((kFirst->type == HX_("CONT_OPT",06,e0,d9,99))) {
HXLINE( 234)											 ::berlin::lib::MachineState move20 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,conf->value));
HXDLIN( 234)											_state[(int)0] = move20;
            										}
            										else {
HXLINE( 235)											if ((kFirst->type == HX_("CONT_AND",aa,3e,cf,99))) {
HXLINE( 236)												 ::berlin::lib::MachineState move21 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::VAL(kFirst->pos,kFirst->asts,kFirst->err)));
HXDLIN( 236)												_state[(int)0] = move21;
            											}
            											else {
HXLINE( 237)												if ((kFirst->type == HX_("CONT_NOT",e6,1c,d9,99))) {
HXLINE( 238)													 ::berlin::lib::MachineState move22 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::FAIL(kFirst->err)));
HXDLIN( 238)													_state[(int)0] = move22;
            												}
            												else {
HXLINE( 239)													if ((kFirst->type == HX_("CONT_NT",b3,1b,5f,99))) {
HXLINE( 240)														::String mode = kFirst->mode;
HXLINE( 241)														::String name = kFirst->name;
HXLINE( 242)														::Array< ::Dynamic> asts1 = kFirst->asts;
HXLINE( 243)														 ::Dynamic nt1 = kFirst->nt;
HXLINE( 245)														 ::berlin::lib::Value value1 = conf->value;
HXLINE( 246)														::Array< ::Dynamic> valAsts = value1->asts;
HXLINE( 247)														int errPos = hx::TCast<  ::berlin::lib::RawError >::cast(value1->err)->pos;
HXLINE( 248)														::cpp::VirtualArray errNts = hx::TCast<  ::berlin::lib::RawError >::cast(value1->err)->nonterminals;
HXLINE( 249)														::cpp::VirtualArray errCcs = hx::TCast<  ::berlin::lib::RawError >::cast(value1->err)->failedChars;
HXLINE( 251)														 ::berlin::lib::RawError newErr =  ::berlin::lib::RawError_obj::__alloc( HX_CTX ,errPos,errNts,errCcs,nt1);
HXLINE( 253)														::String _hx_switch_1 = mode;
            														if (  (_hx_switch_1==HX_("NORMAL",27,1e,ec,e2)) ){
HXLINE( 255)															valAsts->reverse();
HXLINE( 256)															int value2 = value1->pos;
HXDLIN( 256)															 ::berlin::lib::MachineState move23 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::VAL(value2,( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(::berlin::lib::AST_obj::TREE(name,valAsts),asts1)) ),newErr)));
HXDLIN( 256)															_state[(int)0] = move23;
HXLINE( 254)															goto _hx_goto_2;
            														}
            														if (  (_hx_switch_1==HX_("PRUNING",c7,4e,ce,ec)) ){
HXLINE( 259)															if ((valAsts->length == (int)0)) {
HXLINE( 260)																 ::berlin::lib::MachineState move24 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::VAL(value1->pos,asts1,newErr)));
HXDLIN( 260)																_state[(int)0] = move24;
            															}
            															else {
HXLINE( 261)																if ((valAsts->length == (int)1)) {
HXLINE( 262)																	int value3 = value1->pos;
HXDLIN( 262)																	 ::berlin::lib::MachineState move25 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::VAL(value3,( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(::berlin::lib::Util_obj::first(valAsts),asts1)) ),newErr)));
HXDLIN( 262)																	_state[(int)0] = move25;
            																}
            																else {
HXLINE( 264)																	valAsts->reverse();
            																}
            															}
HXLINE( 265)															int value4 = value1->pos;
HXDLIN( 265)															 ::berlin::lib::MachineState move26 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::VAL(value4,( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(::berlin::lib::AST_obj::TREE(name,valAsts),asts1)) ),newErr)));
HXDLIN( 265)															_state[(int)0] = move26;
HXLINE( 258)															goto _hx_goto_2;
            														}
            														if (  (_hx_switch_1==HX_("VOIDING",ee,e9,d1,c3)) ){
HXLINE( 268)															 ::berlin::lib::MachineState move27 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(kRest,::berlin::lib::Value_obj::VAL(value1->pos,asts1,newErr)));
HXDLIN( 268)															_state[(int)0] = move27;
HXDLIN( 268)															goto _hx_goto_2;
            														}
            														_hx_goto_2:;
            													}
            													else {
HXLINE( 271)														if (hx::IsNotNull( kFirst )) {
HXLINE( 272)															HX_STACK_DO_THROW(HX_("unsupported 4",09,c0,e4,e0));
            														}
            														else {
HXLINE( 273)															if ((conf->value->type == HX_("VAL",c1,7a,41,00))) {
HXLINE( 274)																::Array< ::Dynamic> ts = conf->value->asts;
HXLINE( 276)																if (( (bool)(eof(conf->value->pos)) )) {
HXLINE( 277)																	if (hx::IsEq(  ::Dynamic(::Reflect_obj::field(_gthis->env,_gthis->start)->__Field(HX_("mode",63,d3,60,48),hx::paccDynamic)),HX_("NORMAL",27,1e,ec,e2) )) {
HXLINE( 278)																		ts->reverse();
HXLINE( 279)																		 ::berlin::lib::MachineState move28 = ::berlin::lib::MachineState_obj::FINAL(::berlin::lib::AST_obj::TREE(_gthis->start,ts));
HXDLIN( 279)																		_state[(int)0] = move28;
            																	}
            																	else {
HXLINE( 280)																		if (hx::IsEq(  ::Dynamic(::Reflect_obj::field(_gthis->env,_gthis->start)->__Field(HX_("mode",63,d3,60,48),hx::paccDynamic)),HX_("PRUNING",c7,4e,ce,ec) )) {
HXLINE( 282)																			if ((ts->length == (int)0)) {
HXLINE( 283)																				 ::berlin::lib::MachineState move29 = ::berlin::lib::MachineState_obj::FINAL(::berlin::lib::AST_obj::EMPTY());
HXDLIN( 283)																				_state[(int)0] = move29;
            																			}
            																			else {
HXLINE( 284)																				if ((ts->length == (int)1)) {
HXLINE( 285)																					 ::berlin::lib::MachineState move30 = ::berlin::lib::MachineState_obj::FINAL(::berlin::lib::Util_obj::first(ts));
HXDLIN( 285)																					_state[(int)0] = move30;
            																				}
            																				else {
HXLINE( 287)																					ts->reverse();
HXLINE( 288)																					 ::berlin::lib::MachineState move31 = ::berlin::lib::MachineState_obj::FINAL(::berlin::lib::AST_obj::TREE(_gthis->start,ts));
HXDLIN( 288)																					_state[(int)0] = move31;
            																				}
            																			}
            																		}
            																		else {
HXLINE( 291)																			::berlin::lib::MachineState_obj::FINAL(::berlin::lib::AST_obj::EMPTY());
            																		}
            																	}
            																}
            																else {
HXLINE( 293)																	bool move32;
HXDLIN( 293)																	if (hx::IsNotNull( hx::TCast<  ::berlin::lib::RawError >::cast(conf->value->err) )) {
HXLINE( 293)																		int conf6 = conf->value->pos;
HXDLIN( 293)																		move32 = (conf6 == hx::TCast<  ::berlin::lib::RawError >::cast(conf->value->err)->pos);
            																	}
            																	else {
HXLINE( 293)																		move32 = false;
            																	}
HXDLIN( 293)																	if (move32) {
HXLINE( 294)																		 ::berlin::lib::RawError err1 = ( ( ::berlin::lib::RawError)(conf->value->err) );
HXLINE( 295)																		 ::berlin::lib::MachineState move33 = ::berlin::lib::MachineState_obj::FINAL( ::berlin::lib::RawError_obj::__alloc( HX_CTX ,conf->value->pos,err1->nonterminals,err1->failedChars,null())->toParseError(input));
HXDLIN( 295)																		_state[(int)0] = move33;
            																	}
            																	else {
HXLINE( 297)																		 ::berlin::lib::MachineState move34 = ::berlin::lib::MachineState_obj::FINAL( ::berlin::lib::RawError_obj::__alloc( HX_CTX ,conf->value->pos,::cpp::VirtualArray_obj::__new(0),::cpp::VirtualArray_obj::__new(0),null())->toParseError(input));
HXDLIN( 297)																		_state[(int)0] = move34;
            																	}
            																}
            															}
            															else {
HXLINE( 299)																if ((conf->value->type == HX_("FAIL",de,81,76,2e))) {
HXLINE( 300)																	 ::berlin::lib::MachineState move35 = ::berlin::lib::MachineState_obj::FINAL(hx::TCast<  ::berlin::lib::RawError >::cast(conf->value->err)->toParseError(input));
HXDLIN( 300)																	_state[(int)0] = move35;
            																}
            																else {
HXLINE( 302)																	HX_STACK_DO_THROW(HX_("unsupported 3",08,c0,e4,e0));
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXLINE( 193)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("EVAL",9c,33,dd,2d)) ){
HXLINE(  74)					::String _g1 = exp->type;
HXDLIN(  74)					::String _hx_switch_2 = _g1;
            					if (  (_hx_switch_2==HX_("ALT",09,95,31,00)) ){
HXLINE(  89)						es = exp->args;
HXLINE(  90)						if ((es->length > (int)0)) {
HXLINE(  92)							 ::Dynamic move36 = ::berlin::lib::Util_obj::first(es);
HXDLIN(  92)							::Array< ::Dynamic> value5 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::rest(es)) );
HXDLIN(  92)							 ::Dynamic this1 = ::berlin::lib::Continuations_obj::CONT_ALT(value5,pos1,asts);
HXDLIN(  92)							::Array< ::Dynamic> move37 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this1,k)) );
HXDLIN(  92)							 ::berlin::lib::MachineState move38 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(( ( ::berlin::lib::Exp)(move36) ),pos1,asts,err,move37));
HXDLIN(  92)							_state[(int)0] = move38;
            						}
            						else {
HXLINE(  95)							 ::berlin::lib::MachineState move39 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(k,( ( ::berlin::lib::Value)(err) )));
HXDLIN(  95)							_state[(int)0] = move39;
            						}
HXLINE(  88)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("AND",b7,96,31,00)) ){
HXLINE( 100)						 ::berlin::lib::Exp move40 = ( ( ::berlin::lib::Exp)(exp->args->__get((int)0)) );
HXDLIN( 100)						 ::Dynamic this2 = ::berlin::lib::Continuations_obj::CONT_AND(pos1,asts,err);
HXDLIN( 100)						::Array< ::Dynamic> move41 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this2,k)) );
HXDLIN( 100)						 ::berlin::lib::MachineState move42 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(move40,pos1,::Array_obj< ::Dynamic>::__new(0),err,move41));
HXDLIN( 100)						_state[(int)0] = move42;
HXDLIN( 100)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("ANY",cc,96,31,00)) ){
HXLINE(  79)						if (( (bool)(eof(pos1)) )) {
HXLINE(  80)							 ::Dynamic value6 =  ::berlin::lib::ErrAny_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::berlin::lib::Value move43 = ::berlin::lib::Value_obj::FAIL(::berlin::lib::Util_obj::updateError(( ( ::berlin::lib::RawError)(err) ),pos1,value6));
HXDLIN(  80)							 ::berlin::lib::MachineState move44 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(k,move43));
HXDLIN(  80)							_state[(int)0] = move44;
            						}
            						else {
HXLINE(  83)							int move45 = (pos1 + (int)1);
HXDLIN(  83)							 ::Dynamic this3 = input.charAt(pos1);
HXDLIN(  83)							::Array< ::Dynamic> move46 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this3,asts)) );
HXDLIN(  83)							 ::berlin::lib::Value move47 = ::berlin::lib::Value_obj::VAL(move45,move46,err);
HXDLIN(  83)							 ::berlin::lib::MachineState move48 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(k,move47));
HXDLIN(  83)							_state[(int)0] = move48;
            						}
HXLINE(  79)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("CHAR",d6,26,80,2c)) ){
HXLINE( 112)						 ::Dynamic c = exp->args->__get((int)0);
HXLINE( 113)						 ::berlin::lib::Value newval;
HXLINE( 114)						bool move49;
HXDLIN( 114)						if (!(( (bool)(eof(pos1)) ))) {
HXLINE( 114)							move49 = (( (::String)(c) ) != input.charAt(pos1));
            						}
            						else {
HXLINE( 114)							move49 = true;
            						}
HXDLIN( 114)						if (move49) {
HXLINE( 116)							 ::Dynamic value7 =  ::berlin::lib::ErrChar_obj::__alloc( HX_CTX ,c);
HXDLIN( 116)							newval = ::berlin::lib::Value_obj::FAIL(::berlin::lib::Util_obj::updateError(( ( ::berlin::lib::RawError)(err) ),pos1,value7));
            						}
            						else {
HXLINE( 119)							int newval1 = (pos1 + (int)1);
HXDLIN( 119)							 ::Dynamic this4 = input.charAt(pos1);
HXDLIN( 119)							::Array< ::Dynamic> newval2 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this4,asts)) );
HXDLIN( 119)							newval = ::berlin::lib::Value_obj::VAL(newval1,newval2,err);
            						}
HXLINE( 121)						 ::berlin::lib::MachineState move50 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(k,newval));
HXDLIN( 121)						_state[(int)0] = move50;
HXLINE( 111)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("CHAR_CLASS",af,e2,3f,41)) ){
            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,_state) HXARGC(1)
            						 ::berlin::lib::MachineState _hx_run( ::Dynamic charClasses){
            							HX_GC_STACKFRAME(&_hx_pos_7dbd3ce9fe073727_129_match)
HXLINE( 129)							return _state->__get((int)0).StaticCast<  ::berlin::lib::MachineState >();
            						}
            						HX_END_LOCAL_FUNC1(return)

            						HX_BEGIN_LOCAL_FUNC_S10(hx::LocalFunc,_hx_Closure_2, ::Dynamic,err,::Array< ::Dynamic>,visit,::Array< ::Dynamic>,asts,::Array< ::Dynamic>,k,int,pos1,::Array< ::Dynamic>,_state,::String,input,::cpp::VirtualArray,cc,::Array< ::String >,c2,::Array< ::String >,c1) HXARGC(1)
            						 ::berlin::lib::MachineState _hx_run( ::Dynamic charClasses1){
            							HX_GC_STACKFRAME(&_hx_pos_7dbd3ce9fe073727_132_match)
HXLINE( 133)							 ::berlin::lib::MachineState _hx___state = _state->__get((int)0).StaticCast<  ::berlin::lib::MachineState >();
HXLINE( 134)							if ((hx::TCast< ::cpp::VirtualArray >::cast(charClasses1)->get_length() == (int)0)) {
HXLINE( 135)								 ::Dynamic value8 =  ::berlin::lib::ErrCC_obj::__alloc( HX_CTX ,cc);
HXDLIN( 135)								 ::berlin::lib::Value _hx___state1 = ::berlin::lib::Value_obj::FAIL(::berlin::lib::Util_obj::updateError(( ( ::berlin::lib::RawError)(err) ),pos1,value8));
HXDLIN( 135)								_hx___state = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(k,_hx___state1));
            							}
            							else {
HXLINE( 137)								::String move51;
HXDLIN( 137)								if (::Std_obj::is(::berlin::lib::Util_obj::first(( (::cpp::VirtualArray)(charClasses1) )),hx::ArrayBase::__mClass)) {
HXLINE( 137)									move51 = ( (::String)(::berlin::lib::Util_obj::first(( (::cpp::VirtualArray)(charClasses1) ))->__GetItem((int)0)) );
            								}
            								else {
HXLINE( 137)									move51 = ( (::String)(::berlin::lib::Util_obj::first(( (::cpp::VirtualArray)(charClasses1) ))) );
            								}
HXDLIN( 137)								c1[(int)0] = move51;
HXLINE( 138)								::String move52;
HXDLIN( 138)								if (::Std_obj::is(::berlin::lib::Util_obj::first(( (::cpp::VirtualArray)(charClasses1) )),hx::ArrayBase::__mClass)) {
HXLINE( 138)									move52 = ( (::String)(::berlin::lib::Util_obj::first(( (::cpp::VirtualArray)(charClasses1) ))->__GetItem((int)1)) );
            								}
            								else {
HXLINE( 138)									move52 = ( (::String)(::berlin::lib::Util_obj::first(( (::cpp::VirtualArray)(charClasses1) ))) );
            								}
HXDLIN( 138)								c2[(int)0] = move52;
HXLINE( 140)								bool move53;
HXDLIN( 140)								::String c11 = c1->__get((int)0);
HXDLIN( 140)								if ((c11 <= input.charAt(pos1))) {
HXLINE( 140)									::String c21 = c2->__get((int)0);
HXDLIN( 140)									move53 = (c21 >= input.charAt(pos1));
            								}
            								else {
HXLINE( 140)									move53 = false;
            								}
HXDLIN( 140)								if (move53) {
HXLINE( 141)									int _hx___state2 = (pos1 + (int)1);
HXDLIN( 141)									 ::Dynamic this5 = input.charAt(pos1);
HXDLIN( 141)									::Array< ::Dynamic> _hx___state3 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this5,asts)) );
HXDLIN( 141)									 ::berlin::lib::Value _hx___state4 = ::berlin::lib::Value_obj::VAL(_hx___state2,_hx___state3,err);
HXDLIN( 141)									_hx___state = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(k,_hx___state4));
            								}
            								else {
HXLINE( 143)									 ::Dynamic visit1 = visit->__get((int)0);
HXDLIN( 143)									_hx___state = ( ( ::berlin::lib::MachineState)(visit1(::berlin::lib::Util_obj::rest(( (::cpp::VirtualArray)(charClasses1) )))) );
            								}
            							}
HXLINE( 147)							return _hx___state;
            						}
            						HX_END_LOCAL_FUNC1(return)

HXLINE( 125)						::cpp::VirtualArray cc = exp->args;
HXLINE( 126)						::Array< ::String > c1 = ::Array_obj< ::String >::__new(1)->init(0,null());
HXLINE( 127)						::Array< ::String > c2 = ::Array_obj< ::String >::__new(1)->init(0,null());
HXLINE( 128)						::Array< ::Dynamic> visit = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(new _hx_Closure_1(_state)));
HXLINE( 132)						visit[(int)0] =  ::Dynamic(new _hx_Closure_2(err,visit,asts,k,pos1,_state,input,cc,c2,c1));
HXLINE( 151)						if (( (bool)(eof(pos1)) )) {
HXLINE( 152)							 ::Dynamic value9 =  ::berlin::lib::ErrCC_obj::__alloc( HX_CTX ,cc);
HXDLIN( 152)							 ::berlin::lib::Value move54 = ::berlin::lib::Value_obj::FAIL(::berlin::lib::Util_obj::updateError(( ( ::berlin::lib::RawError)(err) ),pos1,value9));
HXDLIN( 152)							 ::berlin::lib::MachineState move55 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(k,move54));
HXDLIN( 152)							_state[(int)0] = move55;
            						}
            						else {
HXLINE( 154)							return visit->__get((int)0)(cc);
            						}
HXLINE( 124)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("NOT",f3,74,3b,00)) ){
HXLINE( 104)						 ::berlin::lib::Exp move56 = ( ( ::berlin::lib::Exp)(exp->args->__get((int)0)) );
HXDLIN( 104)						 ::Dynamic this6 = ::berlin::lib::Continuations_obj::CONT_NOT(pos1,asts,err);
HXDLIN( 104)						::Array< ::Dynamic> move57 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this6,k)) );
HXDLIN( 104)						 ::berlin::lib::MachineState move58 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(move56,pos1,::Array_obj< ::Dynamic>::__new(0),err,move57));
HXDLIN( 104)						_state[(int)0] = move58;
HXDLIN( 104)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("NT",46,44,00,00)) ){
HXLINE( 179)						::String name1 = ( (::String)(exp->args->__get((int)0)) );
HXLINE( 180)						::String mode1 = hx::TCast<  ::berlin::lib::NonTerminal >::cast(::Reflect_obj::field(_gthis->env,name1))->mode;
HXLINE( 181)						 ::berlin::lib::Exp e = hx::TCast<  ::berlin::lib::NonTerminal >::cast(::Reflect_obj::field(_gthis->env,name1))->exp;
HXLINE( 182)						 ::berlin::lib::RawError err2 =  ::berlin::lib::RawError_obj::__alloc( HX_CTX , ::Dynamic(err->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)), ::Dynamic(err->__Field(HX_("nonterminals",ca,48,83,be),hx::paccDynamic)), ::Dynamic(err->__Field(HX_("failedChars",e0,59,ab,17),hx::paccDynamic)),name1);
HXLINE( 184)						 ::Dynamic this7 = ::berlin::lib::Continuations_obj::CONT_NT(mode1,name1,asts,conf->value->err);
HXDLIN( 184)						::Array< ::Dynamic> move59 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this7,k)) );
HXDLIN( 184)						 ::berlin::lib::MachineState move60 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(e,pos1,::Array_obj< ::Dynamic>::__new(0),err2,move59));
HXDLIN( 184)						_state[(int)0] = move60;
HXLINE( 178)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("OPT",13,38,3c,00)) ){
HXLINE( 176)						 ::berlin::lib::Exp move61 = ( ( ::berlin::lib::Exp)(exp->args->__get((int)0)) );
HXDLIN( 176)						 ::Dynamic this8 = ::berlin::lib::Continuations_obj::CONT_OPT(pos1,asts);
HXDLIN( 176)						::Array< ::Dynamic> move62 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this8,k)) );
HXDLIN( 176)						 ::berlin::lib::MachineState move63 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(move61,pos1,asts,err,move62));
HXDLIN( 176)						_state[(int)0] = move63;
HXDLIN( 176)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("PLUS",5a,07,1b,35)) ){
HXLINE( 170)						 ::berlin::lib::Exp move64 = ( ( ::berlin::lib::Exp)(exp->args->__get((int)0)) );
HXDLIN( 170)						 ::Dynamic this9 = ::berlin::lib::Continuations_obj::CONT_PLUS(exp->args->__get((int)0));
HXDLIN( 170)						::Array< ::Dynamic> move65 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this9,k)) );
HXDLIN( 170)						 ::berlin::lib::MachineState move66 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(move64,pos1,asts,err,move65));
HXDLIN( 170)						_state[(int)0] = move66;
HXDLIN( 170)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("SEQ",7f,37,3f,00)) ){
HXLINE( 163)						::cpp::VirtualArray exprs = exp->args;
HXLINE( 164)						if (hx::IsNull( exprs )) {
HXLINE( 165)							 ::berlin::lib::Value move67 = ::berlin::lib::Value_obj::VAL(pos1,asts,err);
HXDLIN( 165)							 ::berlin::lib::MachineState move68 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::APPLY(k,move67));
HXDLIN( 165)							_state[(int)0] = move68;
            						}
            						else {
HXLINE( 167)							 ::Dynamic move69 = ::berlin::lib::Util_obj::first(exprs);
HXDLIN( 167)							 ::Dynamic this10 = ::berlin::lib::Continuations_obj::CONT_SEQ(( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::rest(exprs)) ));
HXDLIN( 167)							::Array< ::Dynamic> move70 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this10,k)) );
HXDLIN( 167)							 ::berlin::lib::MachineState move71 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(( ( ::berlin::lib::Exp)(move69) ),pos1,asts,err,move70));
HXDLIN( 167)							_state[(int)0] = move71;
            						}
HXLINE( 157)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("STAR",d2,ab,1c,37)) ){
HXLINE( 173)						 ::berlin::lib::Exp move72 = ( ( ::berlin::lib::Exp)(exp->args->__get((int)0)) );
HXDLIN( 173)						 ::Dynamic this11 = ::berlin::lib::Continuations_obj::CONT_STAR(exp->args->__get((int)0),pos1,asts);
HXDLIN( 173)						::Array< ::Dynamic> move73 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this11,k)) );
HXDLIN( 173)						 ::berlin::lib::MachineState move74 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(move72,pos1,asts,err,move73));
HXDLIN( 173)						_state[(int)0] = move74;
HXDLIN( 173)						goto _hx_goto_3;
            					}
            					if (  (_hx_switch_2==HX_("VOID",54,8b,14,39)) ){
HXLINE( 108)						 ::berlin::lib::Exp move75 = ( ( ::berlin::lib::Exp)(exp->args->__get((int)0)) );
HXDLIN( 108)						 ::Dynamic this12 = ::berlin::lib::Continuations_obj::CONT_VOID(asts);
HXDLIN( 108)						::Array< ::Dynamic> move76 = ( (::Array< ::Dynamic>)(::berlin::lib::Util_obj::arrayPrepend(this12,k)) );
HXDLIN( 108)						 ::berlin::lib::MachineState move77 = ::berlin::lib::MachineState_obj::INTER(::berlin::lib::MachineConfiguration_obj::EVAL(move75,pos1,::Array_obj< ::Dynamic>::__new(0),err,move76));
HXDLIN( 108)						_state[(int)0] = move77;
HXDLIN( 108)						goto _hx_goto_3;
            					}
            					/* default */{
HXLINE( 186)						HX_STACK_DO_THROW(HX_("unsupported 2",07,c0,e4,e0));
            					}
            					_hx_goto_3:;
HXLINE(  74)					goto _hx_goto_1;
            				}
            				_hx_goto_1:;
            			}
HXLINE( 311)			return _state->__get((int)0).StaticCast<  ::berlin::lib::MachineState >();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_7dbd3ce9fe073727_28_match)
HXLINE(  27)		 ::berlin::lib::Parser _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  29)		int inputLen = input.length;
HXLINE(  30)		 ::Dynamic eof =  ::Dynamic(new _hx_Closure_0(inputLen));
HXLINE(  35)		 ::Dynamic move =  ::Dynamic(new _hx_Closure_3(_gthis,eof,input));
HXLINE( 316)		 ::berlin::lib::Exp state = hx::TCast<  ::berlin::lib::NonTerminal >::cast(::Reflect_obj::field(this->env,nt))->exp;
HXDLIN( 316)		 ::berlin::lib::MachineState state1 = ( ( ::berlin::lib::MachineState)(move(::berlin::lib::MachineConfiguration_obj::EVAL(state,(int)0,::Array_obj< ::Dynamic>::__new(0), ::berlin::lib::RawError_obj::__alloc( HX_CTX ,(int)0,::cpp::VirtualArray_obj::__new(1)->init(0,nt),::cpp::VirtualArray_obj::__new(0),nt),::Array_obj< ::Dynamic>::__new(0)))) );
HXLINE( 317)		while((state1->type != HX_("FINAL",56,97,88,7e))){
HXLINE( 318)			state1 = ( ( ::berlin::lib::MachineState)(move(state1->configuration)) );
            		}
HXLINE( 320)		return state1->result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,match,return )

 ::berlin::lib::AST Parser_obj::parse(::String input){
            	HX_STACKFRAME(&_hx_pos_7dbd3ce9fe073727_325_parse)
HXDLIN( 325)		return ( ( ::berlin::lib::AST)(this->match(this->start,input)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parse,return )


hx::ObjectPtr< Parser_obj > Parser_obj::__new( ::Dynamic env,::String __o_start) {
	hx::ObjectPtr< Parser_obj > __this = new Parser_obj();
	__this->__construct(env,__o_start);
	return __this;
}

hx::ObjectPtr< Parser_obj > Parser_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic env,::String __o_start) {
	Parser_obj *__this = (Parser_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Parser_obj), true, "berlin.lib.Parser"));
	*(void **)__this = Parser_obj::_hx_vtable;
	__this->__construct(env,__o_start);
	return __this;
}

Parser_obj::Parser_obj()
{
}

void Parser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Parser);
	HX_MARK_MEMBER_NAME(env,"env");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_END_CLASS();
}

void Parser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(env,"env");
	HX_VISIT_MEMBER_NAME(start,"start");
}

hx::Val Parser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"env") ) { return hx::Val( env ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"match") ) { return hx::Val( match_dyn() ); }
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Parser_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"env") ) { env=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Parser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("env","\xed","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Parser_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Parser_obj,env),HX_HCSTRING("env","\xed","\x03","\x4d","\x00")},
	{hx::fsString,(int)offsetof(Parser_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Parser_obj_sStaticStorageInfo = 0;
#endif

static ::String Parser_obj_sMemberFields[] = {
	HX_HCSTRING("env","\xed","\x03","\x4d","\x00"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	::String(null()) };

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
};

#endif

hx::Class Parser_obj::__mClass;

void Parser_obj::__register()
{
	hx::Object *dummy = new Parser_obj;
	Parser_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("berlin.lib.Parser","\x94","\x82","\x65","\x59");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Parser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace berlin
} // end namespace lib
