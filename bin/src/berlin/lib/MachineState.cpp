// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_berlin_lib_MachineConfiguration
#include <berlin/lib/MachineConfiguration.h>
#endif
#ifndef INCLUDED_berlin_lib_MachineState
#include <berlin/lib/MachineState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff163d053d5b4a09_14_new,"berlin.lib.MachineState","new",0x38f668f1,"berlin.lib.MachineState.new","berlin/lib/MachineState.hx",14,0xc7aa8d5d)
HX_LOCAL_STACK_FRAME(_hx_pos_ff163d053d5b4a09_22_FINAL,"berlin.lib.MachineState","FINAL",0x176f3627,"berlin.lib.MachineState.FINAL","berlin/lib/MachineState.hx",22,0xc7aa8d5d)
HX_LOCAL_STACK_FRAME(_hx_pos_ff163d053d5b4a09_27_INTER,"berlin.lib.MachineState","INTER",0xd4f595cd,"berlin.lib.MachineState.INTER","berlin/lib/MachineState.hx",27,0xc7aa8d5d)
namespace berlin{
namespace lib{

void MachineState_obj::__construct(::String type, ::Dynamic result, ::berlin::lib::MachineConfiguration configuration){
            	HX_STACKFRAME(&_hx_pos_ff163d053d5b4a09_14_new)
HXLINE(  15)		this->type = type;
HXLINE(  16)		this->result = result;
HXLINE(  17)		this->configuration = configuration;
            	}

Dynamic MachineState_obj::__CreateEmpty() { return new MachineState_obj; }

void *MachineState_obj::_hx_vtable = 0;

Dynamic MachineState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MachineState_obj > _hx_result = new MachineState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MachineState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x584e030d;
}

 ::berlin::lib::MachineState MachineState_obj::FINAL( ::Dynamic result){
            	HX_GC_STACKFRAME(&_hx_pos_ff163d053d5b4a09_22_FINAL)
HXDLIN(  22)		return  ::berlin::lib::MachineState_obj::__alloc( HX_CTX ,HX_("FINAL",56,97,88,7e),result,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MachineState_obj,FINAL,return )

 ::berlin::lib::MachineState MachineState_obj::INTER( ::berlin::lib::MachineConfiguration configuration){
            	HX_GC_STACKFRAME(&_hx_pos_ff163d053d5b4a09_27_INTER)
HXDLIN(  27)		return  ::berlin::lib::MachineState_obj::__alloc( HX_CTX ,HX_("INTER",fc,f6,0e,3c),null(),configuration);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MachineState_obj,INTER,return )


hx::ObjectPtr< MachineState_obj > MachineState_obj::__new(::String type, ::Dynamic result, ::berlin::lib::MachineConfiguration configuration) {
	hx::ObjectPtr< MachineState_obj > __this = new MachineState_obj();
	__this->__construct(type,result,configuration);
	return __this;
}

hx::ObjectPtr< MachineState_obj > MachineState_obj::__alloc(hx::Ctx *_hx_ctx,::String type, ::Dynamic result, ::berlin::lib::MachineConfiguration configuration) {
	MachineState_obj *__this = (MachineState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MachineState_obj), true, "berlin.lib.MachineState"));
	*(void **)__this = MachineState_obj::_hx_vtable;
	__this->__construct(type,result,configuration);
	return __this;
}

MachineState_obj::MachineState_obj()
{
}

void MachineState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MachineState);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_MEMBER_NAME(configuration,"configuration");
	HX_MARK_END_CLASS();
}

void MachineState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(result,"result");
	HX_VISIT_MEMBER_NAME(configuration,"configuration");
}

hx::Val MachineState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"configuration") ) { return hx::Val( configuration ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MachineState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"FINAL") ) { outValue = FINAL_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"INTER") ) { outValue = INTER_dyn(); return true; }
	}
	return false;
}

hx::Val MachineState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"configuration") ) { configuration=inValue.Cast<  ::berlin::lib::MachineConfiguration >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MachineState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("result","\xdd","\x68","\x84","\x08"));
	outFields->push(HX_HCSTRING("configuration","\xb6","\x60","\xd8","\xbd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MachineState_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(MachineState_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(MachineState_obj,result),HX_HCSTRING("result","\xdd","\x68","\x84","\x08")},
	{hx::fsObject /*::berlin::lib::MachineConfiguration*/ ,(int)offsetof(MachineState_obj,configuration),HX_HCSTRING("configuration","\xb6","\x60","\xd8","\xbd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MachineState_obj_sStaticStorageInfo = 0;
#endif

static ::String MachineState_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("result","\xdd","\x68","\x84","\x08"),
	HX_HCSTRING("configuration","\xb6","\x60","\xd8","\xbd"),
	::String(null()) };

static void MachineState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MachineState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MachineState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MachineState_obj::__mClass,"__mClass");
};

#endif

hx::Class MachineState_obj::__mClass;

static ::String MachineState_obj_sStaticFields[] = {
	HX_HCSTRING("FINAL","\x56","\x97","\x88","\x7e"),
	HX_HCSTRING("INTER","\xfc","\xf6","\x0e","\x3c"),
	::String(null())
};

void MachineState_obj::__register()
{
	hx::Object *dummy = new MachineState_obj;
	MachineState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("berlin.lib.MachineState","\x7f","\x1c","\x99","\x81");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MachineState_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MachineState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MachineState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MachineState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MachineState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MachineState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MachineState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MachineState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace berlin
} // end namespace lib
